// process.env.NODE_ENV = 'development'
const path = require('path')

const webpack = require('webpack') // 用于获取webpack内置的插件

const merge = require('webpack-merge') // 用来把基础配置文件融合到开发环境配置文件

const baseWebpackConfig = require('./webpack.base.conf') // 定义基础配置文件

const HtmlWebpackPlugin = require('html-webpack-plugin') // 动态生成html的插件

// 定义开发环境的配置
const devWebpackConfig = merge(baseWebpackConfig, {
  // 开发模式
  mode: 'development',

  // 报错的时候在控制台输出源码的位置 ( 开发环境 cheap-module-eval-source-map, 生产环境 cheap-module-source-map )
  devtool: 'cheap-module-eval-source-map',

  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html', // html模板路径
      filename: './index.html', // 生成的html存放路径，相对于 output.path
      inject: true // Inject all files that are generated by webpack, e.g. bundle.js
    }),
    new webpack.HotModuleReplacementPlugin() // Tell webpack we want hot reloading
  ],

  devServer: {
    contentBase: path.join(__dirname, 'dist'), // 服务于 dist/ 目录
    open: true, // 当open启用时，开发服务器将自动打开浏览器
    compress: true, // 为服务的所有内容启用gzip压缩
    // host: '0.0.0.0', // 指定要使用的主机，默认是localhost，如果希望可以被外部访问，指定成 '0.0.0.0' 即可
    port: 9090, // 监听端口
    proxy: {
      /* 无论任何请求都将转向请求 http://localhost:3000/aaa/users */
      '*': {
        target: 'https://qa01.letzgo.com.cn',
        /**
         * 参数changeOrigin: true解决了两种使用虚拟主机代理错误的情况，一种是HTTPS握手失败，另一种是404 Not Found
         * 默认为false,只有当设为true时，才会传给正确的host头,否则http-proxy-middleware会原封不动将本地 HTTP 请求发往后端
         */
        changeOrigin: true,
        secure: false // 默认情况下为true，不接受运行在HTTPS上，且使用了无效证书的后端服务器，改成false即可解决该问题
      },
      /* 请求 /aaa/users 将转向请求 http://localhost:3000/aaa/users */
      '/aaa': 'http://localhost:3000',
      /* 请求 /bbb/users 将转向请求 http://localhost:3000/users */
      '/bbb': {
        target: 'http://localhost:3000',
        pathRewrite: { '^/api': '' }
      }
    },
    overlay: {
      warnings: true, // 显示警告
      errors: true // 显示错误
    }
  }
})

// 导出配置
module.exports = devWebpackConfig
